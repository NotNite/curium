// IntelliJ's Groovy handling is terrible
//file:noinspection GroovyAssignabilityCheck
plugins {
    id "fabric-loom" version "1.1-SNAPSHOT"
    id "maven-publish"
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

version = project.mod_version
group = project.maven_group

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
    repositories {
        maven {
            name "Jitpack"
            url "https://jitpack.io"
        }
    }
}

configurations {
    modImplementation.extendsFrom(modInclude)
    include.extendsFrom(modInclude)

    implementation.extendsFrom(library)
    shadow.extendsFrom(library)
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Dependencies
    library "com.github.meteordevelopment:orbit:${project.orbit_commit_slug}"
}

loom {
    accessWidenerPath.set(file("src/main/resources/curium.accesswidener"))

    runs {
        remove server
    }
}

shadowJar {
    configurations = [project.configurations.shadow]
}

remapJar {
    dependsOn shadowJar
    inputFile.set(shadowJar.archiveFile)
}

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }

    archivesBaseName = project.archives_base_name
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}
